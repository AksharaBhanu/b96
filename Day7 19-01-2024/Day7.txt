locators:
tagname, id, name ,classname,link text,partial link text, css selector & xpath


xpath-->
path of the element in html tree
dot--> root element
/-->child 
index starts from 1

//--> descendant (any child for root)

if we dont specify index--> all
/html[1]/body[1]/div[1]/input[1]

/html/body/div[1]/input[1]

/html/body/div[1]/input[1]

/html/body/div[1]/div[3]/form/div[1]/div[1]/div[4]/center/input[1]

absolute xpath 		relative xpath

/html/body/a   --->//a

in xpath also we can use attribute

tag[@AN='AV']   

<a id="a1" name="n1" class="c1" title="click me" href="http://www.google.com">Google</a>

/html/body/a[@id='a1']   --> using attributes in absolute xpath

//a[@id='a1']		-->using attributes in relative xpath
//a[@name='n1']
//a[@class='c1']
//a[@title='click me']
//a[@href='http://www.google.com']

in xpath we can use text
tag[text()='tv']
//a[text()='Google']

what is the diff b/w text & text()

text--> attribute value 
text()---> xpath function to identify the element by its text

logical operators 
and 
or 
not

//a[@id='a1' and @name='n1']
//a[@id='a1' or @name='n1']
//a[@id='a1' or text()='Google']
//a[not(@id='a1')] ---> tag should be a and id != a1
//a[not(text()='Google')]

//tag[contains(arg1,arg2)]

arg1---> @AN or text()
arg2---> value
//a[text()='Google']
//a[contains(text(),'Go')]

Inbox(5)---> partial link text
xpath--> //*[contains(text(),'Inbox')]

* means any tag

//tag[@AN='AV']
//tag[text()='tv']
//tag[@AN='AV' and @AN='AV' or not(@AN='AV')]
//tag[contains(arg1,arg2)]
//p[text()='Forgot your password? ']
//p[contains(.,'OrangeHRM OS')]
//p[starts-with(.,'OrangeHRM OS')]
3 functions-- contains starts-with  ends-with -browser








